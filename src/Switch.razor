@using Microsoft.AspNetCore.Components.Web
@using Soenneker.Extensions.String
@using Soenneker.Quark.Enums.Colors
@using Soenneker.Quark.Enums.Size
@using Soenneker.Quark.Labels
@using Soenneker.Quark.Divs

@inherits Soenneker.Quark.Components.Element

<Div Class="form-check form-switch" @attributes="BuildAttributes()">
    <input type="checkbox" class="form-check-input" />
    @if (Label.HasContent())
    {
        <Label Class="form-check-label">@Label</Label>
    }
</Div>

@code {
    [Parameter]
    public bool Checked { get; set; }

    [Parameter]
    public bool Disabled { get; set; }

    [Parameter]
    public string? Label { get; set; }

    [Parameter]
    public Color Color { get; set; } = Color.Primary;

    [Parameter]
    public Size Size { get; set; } = Size.Default;

    [Parameter]
    public EventCallback<bool> CheckedChanged { get; set; }

    [Parameter]
    public EventCallback<ChangeEventArgs> OnChange { get; set; }

    private string? GetColorClass()
    {
        return $"form-check-input-{Color.Value}";
    }

    private string? GetSizeClass()
    {
        if (Size != Size.Default)
            return $"form-check-input-{Size.Value}";
        return null;
    }

    protected override Dictionary<string, object> BuildAttributes()
    {
        Dictionary<string, object> attributes = base.BuildAttributes();

        var baseClasses = "form-check form-switch";
        string? colorClass = GetColorClass();
        string? sizeClass = GetSizeClass();

        if (colorClass != null)
            baseClasses = $"{baseClasses} {colorClass}";

        if (sizeClass != null)
            baseClasses = $"{baseClasses} {sizeClass}";

        attributes["class"] = AppendToClass(attributes.GetValueOrDefault("class")
            ?.ToString(), baseClasses);

        return attributes;
    }

}
